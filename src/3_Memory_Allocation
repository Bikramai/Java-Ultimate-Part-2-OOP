// Note :-
// Memory Allocation:- Variables that are referencing the same object.

// Memory De-allocation:- Well, in Java, unlike C++, we don't have to worry about
// de-allocation memory. Java will automatically take care of that.
// When we exit, a method, Java runtime will immediately remove all the variables
// that are stored in the stack.

// So Here in this example, these two (var textBox1 = new TextBox();
//        var textBox2 = TextBox1); variables are stored in the stack,  and
// they will be immediately removed after executing the main method.
// Now we end up with an object that is on the heap and there is no references to
// this object, so if there is another process in the background, it is watching
// these objects on the heap, if an object it becomes unused for a certain period
// of time, that process is going to automatically remove that object on the heap.
// This is called garbage collection.

// So java runtime has this component called garbage collector which will automatically
// remove unused objects on the heap.